"""Aggregation of graphql queries"""
type Query {
  users: [UserType]
  agents: [AgentType]
  tasks: [TaskType]
  taskLogMessages(taskId: ID!): [TaskLogMessageType]
  user(id: ID!): UserType
  agent(id: ID!): AgentType
  task(id: ID!): TaskType
}

type UserType {
  id: ID!
  password: String!
  lastLogin: DateTime

  """
  Designates that this user has all permissions without explicitly assigning them.
  """
  isSuperuser: Boolean!

  """Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only."""
  username: String!
  firstName: String!
  lastName: String!
  email: String!

  """Designates whether the user can log into this admin site."""
  isStaff: Boolean!

  """
  Designates whether this user should be treated as active. Unselect this instead of deleting accounts.
  """
  isActive: Boolean!
  dateJoined: DateTime!
  taskSet: [TaskType!]!
}

"""
The `DateTime` scalar type represents a DateTime
value as specified by
[iso8601](https://en.wikipedia.org/wiki/ISO_8601).
"""
scalar DateTime

type TaskType {
  id: ID!
  name: String!
  user: UserType!
  goals: [GoalType]
  agent: AgentType!
  isComplete: Boolean!
  createdAt: DateTime!
  completeAt: DateTime
  autonomous: Boolean!
  tasklogmessageSet: [TaskLogMessageType!]!
}

type GoalType {
  description: String!
  complete: Boolean!
}

type AgentType {
  id: ID!
  name: String!
  purpose: String!
  taskSet: [TaskType!]!
  tasklogmessageSet: [TaskLogMessageType!]!
}

type TaskLogMessageType {
  id: ID!
  task: TaskType!
  agent: AgentType
  createdAt: DateTime!
  role: TaskLogTaskLogMessageRoleChoices!
  content: MessageContentType
}

enum TaskLogTaskLogMessageRoleChoices {
  """system"""
  SYSTEM

  """assistant"""
  ASSISTANT

  """user"""
  USER
}

"""Union of all message types sent to the task log API."""
union MessageContentType = AssistantContentType | AutonomousModeContentType | AuthorizeContentType | AuthRequestContentType | ExecutedContentType | FeedbackRequestContentType | FeedbackContentType | SystemContentType

"""
Assistant reply with thoughts and command. Sent in response to prompt
requesting the next command
"""
type AssistantContentType {
  type: String!
  thoughts: ThoughtsType!
  command: CommandType!
}

"""Assistant thoughts"""
type ThoughtsType {
  text: String!
  reasoning: String!
  plan: [String]!
  criticism: String!
  speak: String
}

"""Assistant command"""
type CommandType {
  name: String!
  args: JSONString
}

"""
Allows use of a JSON String for input / output from the GraphQL schema.

Use of this type is *not recommended* as you lose the benefits of having a defined, static
schema (one of the key benefits of GraphQL).
"""
scalar JSONString

"""
Instructs the agent to enable/disable autonomous mode. Mode
change takes effect starting with the next agent process loop tick.
"""
type AutonomousModeContentType {
  type: String!
  enabled: Int!
}

"""User granting permission for agent to run a command"""
type AuthorizeContentType {
  type: String!
  messageId: ID!
}

"""Sent when the agent requires permission to run a command"""
type AuthRequestContentType {
  type: String!
  messageId: ID!
}

"""Sent when the agent requests user feedback on a command or output"""
type ExecutedContentType {
  type: String!
  messageId: ID!
}

"""Sent when the agent requests user feedback on a command or output"""
type FeedbackRequestContentType {
  type: String!
  messageId: ID!
}

"""User feedback sent to agent"""
type FeedbackContentType {
  type: String!
  feedback: String!
}

"""All system messages"""
type SystemContentType {
  type: String!
  message: String!
}

"""Aggregation of graphql queries"""
type Mutation {
  createTask(input: CreateTaskInput!): CreateTaskResponse
  sendFeedback(input: TaskFeedbackInput!): TaskFeedbackMutation
  authorizeCommand(input: CommandAuthorizeInput!): AuthorizeCommandMutation
  setTaskAutonomous(autonomous: Boolean!, taskId: ID!): SetTaskAutonomousMutation
}

type CreateTaskResponse {
  task: TaskType
}

input CreateTaskInput {
  name: String!
  goals: [GoalInput]
  agentId: ID
  autonomous: Boolean
}

input GoalInput {
  description: String!
}

type TaskFeedbackMutation {
  taskLogMessage: TaskLogMessageType
  errors: [String]
}

input TaskFeedbackInput {
  taskId: ID!
  feedback: String!
}

type AuthorizeCommandMutation {
  taskLogMessage: TaskLogMessageType
  errors: [String]
}

input CommandAuthorizeInput {
  messageId: ID!
}

type SetTaskAutonomousMutation {
  task: TaskType
}