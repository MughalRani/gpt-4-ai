"""Aggregation of graphql queries"""
type Query {
  searchArtifacts(search: String, chatId: UUID): [ArtifactType]
  agent(id: UUID!): AgentType
  agents: [AgentType]
  searchAgents(search: String): [AgentType]
  chat(id: UUID!): ChatType
  chats: [ChatType]
  chatPage(limit: Int = 10, offset: Int = 0): ChatsPage
  chain(id: UUID!): ChainType
  chains: [ChainType]
  graph(id: UUID!): ChainWithGraphType
  users: [UserType]
  tasks: [TaskType]
  taskLogMessages(taskId: UUID!): [TaskLogMessageType]
  user(id: ID!): UserType
  task(id: UUID!): TaskType
}

type ArtifactType {
  id: UUID!
  task: TaskType!
  key: String!
  artifactType: String!
  name: String!
  description: String!
  createdAt: DateTime!
  storage: GenericScalar
  chats: [ChatType!]!
}

"""
Leverages the internal Python implementation of UUID (uuid.UUID) to provide native UUID objects
in fields, resolvers and input.
"""
scalar UUID

type TaskType {
  id: UUID!
  parent: TaskType
  name: String!
  user: UserType!
  agent: AgentType
  chain: ChainType!
  isComplete: Boolean!
  createdAt: DateTime!
  completeAt: DateTime
  autonomous: Boolean!
  children: [TaskType!]!
  messages: [TaskLogMessageType!]!
  artifacts: [ArtifactType!]!
  createdPlans(isDraft: Boolean): [PlanType]
  ranPlans: [PlanType!]!
  chats: [ChatType!]!
  leadingChats: [ChatType!]!
}

type UserType {
  id: ID!
  password: String!
  lastLogin: DateTime

  """
  Designates that this user has all permissions without explicitly assigning them.
  """
  isSuperuser: Boolean!

  """Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only."""
  username: String!
  firstName: String!
  lastName: String!
  email: String!

  """Designates whether the user can log into this admin site."""
  isStaff: Boolean!

  """
  Designates whether this user should be treated as active. Unselect this instead of deleting accounts.
  """
  isActive: Boolean!
  dateJoined: DateTime!
  taskSet: [TaskType!]!
}

"""
The `DateTime` scalar type represents a DateTime
value as specified by
[iso8601](https://en.wikipedia.org/wiki/ISO_8601).
"""
scalar DateTime

type AgentType {
  id: UUID!
  name: String!
  alias: String!
  purpose: String!
  createdAt: DateTime!
  model: String!
  config: GenericScalar
  agentClassPath: String!
  chain: ChainType
  resources: [ResourceType!]!
  taskSet: [TaskType!]!
  tasklogmessageSet: [TaskLogMessageType!]!
  leadingChats: [ChatType!]!
  chats: [ChatType!]!
}

"""
The `GenericScalar` scalar type represents a generic
GraphQL scalar value that could be:
String, Boolean, Int, Float, List or Object.
"""
scalar GenericScalar

type ChainType {
  id: UUID!
  name: String!
  description: String!
  createdAt: DateTime!
  root: ChainNodeType!
  agentSet: [AgentType!]!
  taskSet: [TaskType!]!
}

type ChainNodeType {
  id: UUID!
  classPath: String!
  config: GenericScalar
  name: String
  description: String
  nodeType: ChainsChainNodeNodeTypeChoices!
  root: ChainNodeType
  parent: ChainNodeType
}

enum ChainsChainNodeNodeTypeChoices {
  """node"""
  NODE

  """list"""
  LIST

  """map"""
  MAP
}

type ResourceType {
  id: UUID!
  type: AgentsResourceTypeChoices!
  config: JSONString!
  agent: AgentType!
  chats: [ChatType!]!
}

enum AgentsResourceTypeChoices {
  """Vector Memory"""
  VECTOR_MEMORY

  """Database"""
  DATABASE

  """File System"""
  FILE_SYSTEM

  """Cache"""
  CACHE

  """API"""
  API

  """Knowledge Base"""
  KNOWLEDGE_BASE

  """Image Database"""
  IMAGE_DATABASE

  """Audio Database"""
  AUDIO_DATABASE

  """Video Database"""
  VIDEO_DATABASE

  """Cloud Storage"""
  CLOUD_STORAGE

  """Content Delivery Network"""
  CONTENT_DELIVERY_NETWORK

  """Message Queue"""
  MESSAGE_QUEUE

  """Stream Processing"""
  STREAM_PROCESSING
}

"""
Allows use of a JSON String for input / output from the GraphQL schema.

Use of this type is *not recommended* as you lose the benefits of having a defined, static
schema (one of the key benefits of GraphQL).
"""
scalar JSONString

type ChatType {
  id: UUID!
  name: String!
  createdAt: DateTime!
  lead: AgentType!
  agents: [AgentType!]!
  tasks: [TaskType!]!
  artifacts: [ArtifactType!]!
  resources: [ResourceType!]!
  task: TaskType!
}

type TaskLogMessageType {
  id: UUID!
  task: TaskType!
  agent: AgentType
  createdAt: DateTime!
  parent: TaskLogMessageType
  role: TaskLogTaskLogMessageRoleChoices!
  content: GenericScalar
  tasklogmessageSet: [TaskLogMessageType!]!
}

enum TaskLogTaskLogMessageRoleChoices {
  """system"""
  SYSTEM

  """assistant"""
  ASSISTANT

  """user"""
  USER
}

type PlanType {
  id: UUID!
  creator: TaskType!
  runner: TaskType
  name: String!
  description: String!
  createdAt: DateTime!
  isDraft: Boolean!
  isComplete: Boolean!
  steps: [StepType!]!
}

type StepType {
  id: UUID!
  plan: PlanType!
  isComplete: Boolean!
  details: JSONString!
  order: Int
}

type ChatsPage {
  pageNumber: Int
  pages: Int
  count: Int
  hasNext: Boolean
  hasPrevious: Boolean
  objects: [ChatType]
}

type ChainWithGraphType {
  chain: ChainType
  nodes: [ChainNodeType]
  edges: [ChainEdgeType]
}

type ChainEdgeType {
  id: UUID!
  source: ChainNodeType
  target: ChainNodeType
  key: String
  root: ChainNodeType!
  inputMap: GenericScalar
}

"""Aggregation of graphql mutations"""
type Mutation {
  sendInput(input: ChatInput!): ChatInputMutation
  authorizeCommand(input: CommandAuthorizeInput!): AuthorizeCommandMutation
  createChat(input: CreateChatInput): ChatMutationResponse
  removeAgent(agentId: UUID!, chatId: UUID!): RemoveAgentMutation
  addAgent(agentId: UUID!, chatId: UUID!): AddAgentMutation
  createTask(input: CreateTaskInput!): CreateTaskResponse
  startTask(taskId: UUID!): StartTaskMutation
  setTaskAutonomous(autonomous: Boolean!, taskId: UUID!): SetTaskAutonomousMutation
  createAgent(input: AgentInput!): CreateAgentMutation
  updateAgent(input: AgentInput!): UpdateAgentMutation
  deleteAgent(id: UUID!): DeleteAgentMutation
  createResource(input: ResourceInput!): CreateResourceMutation
  updateResource(input: ResourceInput!): UpdateResourceMutation
  deleteResource(id: UUID!): DeleteResourceMutation
}

type ChatInputMutation {
  taskLogMessage: TaskLogMessageType
  errors: [String]
}

input ChatInput {
  chatId: UUID!
  text: String!
}

type AuthorizeCommandMutation {
  taskLogMessage: TaskLogMessageType
  errors: [String]
}

input CommandAuthorizeInput {
  messageId: UUID!
}

type ChatMutationResponse {
  chat: ChatType
}

input CreateChatInput {
  name: String
  agentId: UUID
}

type RemoveAgentMutation {
  chat: ChatType
}

type AddAgentMutation {
  chat: ChatType
}

type CreateTaskResponse {
  task: TaskType
}

input CreateTaskInput {
  name: String!
  agentId: UUID
  chainId: UUID
  autonomous: Boolean
}

type StartTaskMutation {
  task: TaskType
}

type SetTaskAutonomousMutation {
  task: TaskType
}

type CreateAgentMutation {
  agent: AgentType
}

input AgentInput {
  id: UUID
  name: String
  alias: String
  purpose: String
  model: String
  config: GenericScalar
  chainId: UUID
}

type UpdateAgentMutation {
  agent: AgentType
}

type DeleteAgentMutation {
  success: Boolean
}

type CreateResourceMutation {
  resource: ResourceType
}

input ResourceInput {
  id: UUID
  name: String
  type: String
  config: JSONString
}

type UpdateResourceMutation {
  resource: ResourceType
}

type DeleteResourceMutation {
  success: Boolean
}

"""Aggregation of graphql subscriptions"""
type Subscription {
  chatMessageSubscription(chatId: String): ChatMessageSubscription
  chatArtifactSubscription(chatId: String): ChatArtifactSubscription
}

"""GraphQL subscription to TaskLogMessage instances."""
type ChatMessageSubscription {
  taskLogMessage: TaskLogMessageType
  agent: AgentType
  parentId: UUID
}

"""GraphQL subscription to Artifact instances."""
type ChatArtifactSubscription {
  artifact: ArtifactType
}