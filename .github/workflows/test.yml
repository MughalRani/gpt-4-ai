name: Test and Lint

on:
  pull_request:
    types: [opened, synchronize]
  push:
    branches: [main]


jobs:

  postgres_pg_vector:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Log in to the Container registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@9ec57ed1fcdbf14dcef7dfbe97b2010124a938b7
        with:
          images: ghcr.io/kreneskyp/ix/pg-docker-vector:15.3

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: psql.Dockerfile
          push: true
          tags: ghcr.io/kreneskyp/ix/pg-docker-vector:15.3, ghcr.io/kreneskyp/ix/pg-docker-vector:latest
          labels: ${{ steps.meta.outputs.labels }}

  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Load image url
        id: load_image_url
        run: |
          IMAGE_URL=`make image-url`
          echo "image-url=$IMAGE_URL" >> "$GITHUB_OUTPUT"

      - name: Restore Cache
        uses: actions/cache@v2
        id: restore_cache
        with:
          path: image.tar
          key: ${{ steps.load_image_url.outputs.image-url }}

      - name: Build Docker image
        id: build
        if: steps.restore_cache.outputs.cache-hit != 'true'
        run: |
          mkdir -p .sentinel
          IMAGE_URL=`make image-url`
          echo "Building Docker image: $IMAGE_URL"
          make image
          docker save $IMAGE_URL > image.tar

      - name: Cache docker image
        uses: actions/cache@v2
        env:
          cache-name: cache-node-modules
        with:
          path: docker-image.tar
          key: ${{ steps.load_image_url.outputs.image-url }}

  frontend:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Log in to the Container registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build frontend
        uses: ./.github/actions/run-docker
        with:
          # build frontend
          # For now just testing that frontend builds
          command: make frontend

  pytest:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Run pytest
        uses: ./.github/actions/run-docker
        with:
          command: make pytest

  black:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Log in to the Container registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Run black
        uses: ./.github/actions/run-docker
        with:
          command: make black-check

  flake8:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Log in to the Container registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Run flake8
        uses: ./.github/actions/run-docker
        with:
          command: make flake8

# Disabling until a later date
#
#  pyright:
#    needs: build
#    runs-on: ubuntu-latest
#    steps:
#      - uses: actions/checkout@v2
#      - name: Run Pyright
#        uses: ./.github/actions/run-docker
#        with:
#          command: make pyright
