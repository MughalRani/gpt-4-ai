name: Publish
on:
  push:
    branches: [main]
  release:
    types:
      - created

env:
  IMAGE_NAME: ghcr.io/kreneskyp/ix/sandbox

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      -
        name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Load image url
        id: load_image_url
        run: |
          IMAGE_URL=`make image-url`
          echo "image-url=$IMAGE_URL" >> $"GITHUB_ENV"
          echo "image-url=$IMAGE_URL" >> "$GITHUB_OUTPUT"

      - name: Restore Cache
        uses: actions/cache@v2
        id: restore_cache
        with:
          path: image.tar
          key: ${{ steps.load_image_url.outputs.image-url }}

      - name: Build Docker image
        id: build
        if: steps.restore_cache.outputs.cache-hit != 'true'
        run: |
          mkdir -p .sentinel
          IMAGE_URL=`make image-url`
          echo "Building Docker image: $IMAGE_URL"
          make image
          docker save $IMAGE_URL > image.tar

      - name: Cache docker image
        uses: actions/cache@v2
        env:
          cache-name: cache-node-modules
        with:
          path: docker-image.tar
          key: ${{ steps.load_image_url.outputs.image-url }}

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Push to Github Docker Registry
        run: |
          IMAGE_URL=`make image-url`
          docker load --input image.tar
          docker tag ${{ steps.load_image_url.outputs.image-url }} $IMAGE_NAME:latest
          
          if [[ "${{ github.event_name }}" == "push" || "${{ github.event_name }}" == "pull_request" ]]; then
            TAG_NAME=dev
          elif [[ "${{ github.event_name }}" == "release" ]]; then
            TAG_NAME=${{ github.event.release.tag_name }}
          fi
          
          echo "Pushing $IMAGE_NAME:latest to $IMAGE_NAME:$TAG_NAME"
          docker tag $IMAGE_NAME:latest $IMAGE_NAME:$TAG_NAME
          docker push $IMAGE_NAME:$TAG_NAME
          
          if [[ "${{ github.event_name }}" == "release" ]]; then
            echo "Pushing $IMAGE_NAME:latest"
            docker push $IMAGE_NAME:latest
          fi